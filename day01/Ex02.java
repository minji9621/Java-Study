package day01;

public class Ex02 {

}
/* 
 생성자
 - new 연산자와 같이 사용되어
   객체를 생성할 때 호출된다.
 - 리턴된 객체의 주소는 클래스타입 변수에 저장되어 객체에 접근할 때 이용됨
 Car c = new car();
 
 기본생성자
 - 모든 클래스는 하나 이상의 생성자가 존재한다.
 - 클래스 내부에 생성자 선언을 생략했다면
   컴파일러에 의해 기본생성자를 자동 추가한다.
 - 매개변수가 있는 생성자가 있다면 기본생성자를 사용할 수 없다.
   기본생성자를 만들어줘야 한다.
   
 생성자 선언
 - 클래스 이름(매개변수1,매개변수2,...){}
 - 클래스 이름과 동일
 - 메서드와의 차이 : 리턴타입이 없다.
 
 변수 초기화
 - 1. 클래스 변수를 선언할 때 초기화 //클래스 바로 아래에 선언 및 초기화
	: 동일한 클래스로부터 생성되는 객체들은 모두 같은 데이터를 가짐
 - 2. 생성자 초기화
	: 객체 생성 시점에 외부로부터 제공되는 다양한 값으로 초기화 되어야 할 때
	: 생성자의 매개값을 받아서 초기화한다.
	
 this.
 - 가능하면 초기화 시킬 클래스변수의 이름과 동일하게 사용할 것을 권장함(가독성 때문)
 - 이때, 매개변수는 지역변수 -> 생성자 내부에서 우선순위가 높다.
 - 객체 자신의 참조
 
 this() -> 다른 생성자를 호출
 - 생성자 오버로딩 많아지면 중복되는 코드 발생
   매개변수의 수만 다르고 초기화 내용이 비슷한 경우
 - 이때, 초기화 내용은 한 생성자에만 집중적으로 작성하고,
   나머지 생성자는 초기화 내용을 가지고 있는 생성자를 호출하여 사용한다.
 - 생성자에서 다른 생성자를 호출할 때 사용
 
 this.와 this()
 - 생성자 내부의 첫 줄에 위치해야 함
 
 생성자 오버로딩
 - 외부에서 제공되는 다양한 데이터들을 이용해 객체를 초기화하려면 생성자도 다양화 될 필요가 있다.
 - 매개변수를 달리하는 생성자 여러 개를 선언하는 것을 말한다.
 - 주의! 타입과 순서와 개수가 달라야 한다.
*/